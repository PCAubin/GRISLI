# -*- coding: utf-8 -*-
"""preparedata_pancreatic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OYIBhbbBk5lJl3jFS2G7Nfbe99JOYFwu
"""

!pip install -U scvelo

## Prepare the pancreatic endocrinogenesis data

import scvelo as scv

# Load data
adata = scv.datasets.pancreatic_endocrinogenesis()

# Preprocess data
scv.pp.filter_and_normalize(adata, min_shared_counts=20)
scv.pp.moments(adata, n_pcs=30, n_neighbors=30)

# Compute velocity and velocity graph
scv.tl.velocity(adata)
scv.tl.velocity_graph(adata)
scv.pl.velocity_embedding_stream(adata, basis='umap')

# Compute latent time
scv.tl.velocity_pseudotime(adata)
scv.pl.scatter(adata, color='velocity_pseudotime', color_map='gnuplot')

# Gene names
genes = [x.upper() for x in list(adata.var.index)]
print('Total:', len(genes), 'genes')

# Load tflist and regnet
from google.colab import files
uploaded = files.upload()

## Prepare regulatory network

# Read list of TF in the network
f = open('tflist', 'r')
x = f.read().splitlines() 
f.close()
print(len(x),'TF in the network')

# Select TF which are in the expression matrix
tfselect = [tf for tf in x if tf in genes]
tfind = {}
tfindadata = []
i=0
for tf in tfselect:
  tfind[tf] = i
  i += 1
  tfindadata.append(genes.index(tf))

print('Keep',len(tfselect),'TF in the expression matrix')

# Create adjacency matrix of the regulatory network
import numpy as np
A = np.zeros((len(tfselect),len(tfselect)), dtype=int)
f = open('regnet', 'r')
for line in f:
  u,v = line.split()
  if u in tfselect and v in tfselect:
    A[tfind[u],tfind[v]] += 1
f.close()

# Mount drive to save files
from google.colab import drive
drive.mount('/content/gdrive', force_remount=True)

# Save adjacency matrix of the regulatory network restricted to the selected TF
np.savetxt('/content/gdrive/My Drive/A.txt', A, fmt='%d')

# Extract and save expression matrix
exp = adata.layers['spliced']
denseexp = exp[:,tfindadata].todense()
np.savetxt('/content/gdrive/My Drive/exp.txt', denseexp, fmt='%.3f')

# Extract and save velocity matrix
velocity = adata.layers['velocity'][:,tfindadata]
np.savetxt('/content/gdrive/My Drive/velocity.txt', velocity, fmt='%.3f')

# Extract and save pseudotime matrix
pseudotime = adata.obs['velocity_pseudotime']
np.savetxt('/content/gdrive/My Drive/pseudotime.txt', np.array(pseudotime), fmt='%.3f')